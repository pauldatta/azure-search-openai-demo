trigger:
- poc

variables:
  - group: POC-1

  # Project root folder. Point to the folder containing manage.py file.
  - name: projectRoot
    value: $(System.DefaultWorkingDirectory)

  # Python version to use
  - name: pythonVersion
    value: '3.10'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: BuildJob
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '19.x'
      displayName: 'Install Node.js'

    - script: |
        cd app/frontend
        npm install
        npm run build
        cp -r ./node_modules ../backend/static/
      displayName: 'Build and copy Node.js frontend'

    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
      displayName: 'Use Python $(pythonVersion)'

    - script: |
        python -m venv antenv
        source antenv/bin/activate
        python -m pip install --upgrade pip
        pip install setup
        pip install -r requirements.txt
      workingDirectory: $(projectRoot)/app/backend
      displayName: "Install requirements"

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(projectRoot)/app/backend'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      displayName: 'Upload package'
      artifact: drop

- stage: Deploy
  displayName: 'Deploy Web App'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeploymentJob
    pool:
      vmImage: $(vmImageName)
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
            displayName: 'Use Python version'

          - task: AzureRmWebAppDeployment@4
            displayName: 'Deploy Azure Web App : $(webAppName)'
            inputs:
              azureSubscription: $(azureServiceConnectionId)
              appType: webAppLinux
              appName: $(webAppName)
              packageForLinux: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              runtimeStack: 'PYTHON|3.10'
              startupCommand: 'gunicorn app:app -b 0.0.0.0:5000'
              configurationSettings: '-WEBSITE_TIME_ZONE "Eastern Standard Time"'
              appSettings: |
                  -FLASK_APP "app.py"
                  -FLASK_RUN_HOST "0.0.0.0"
                  -WEBSITES_PORT "5000"
                  -AZURE_OPENAI_CHATGPT_DEPLOYMENT "$(AZURE_OPENAI_CHATGPT_DEPLOYMENT)"
                  -AZURE_OPENAI_GPT_DEPLOYMENT "$(AZURE_OPENAI_GPT_DEPLOYMENT)"
                  -AZURE_OPENAI_RESOURCE_GROUP "$(AZURE_OPENAI_RESOURCE_GROUP)"
                  -AZURE_OPENAI_SERVICE "$(AZURE_OPENAI_SERVICE)"
                  -AZURE_SEARCH_INDEX "$(AZURE_SEARCH_INDEX)"
                  -AZURE_SEARCH_SERVICE "$(AZURE_SEARCH_SERVICE)"
                  -AZURE_STORAGE_ACCOUNT "$(AZURE_STORAGE_ACCOUNT)"
                  -AZURE_STORAGE_CONTAINER "content"
                  -AZURE_STORAGE_CONNECTION_STRING "$(AZURE_STORAGE_CONNECTION_STRING)"
                  -AZURE_OPENAI_API_KEY "$(AZURE_OPENAI_API_KEY)"
                  -AZURE_SEARCH_API_KEY "$(AZURE_SEARCH_API_KEY)"
              deploymentMethod: 'zipDeploy'
              slotName: 'production'
              resourceGroupName: $(AZURE_APPSERVICE_RESOURCE_GROUP)
                  