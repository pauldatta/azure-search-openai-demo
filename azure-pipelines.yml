# Please create a variable group named POC-1 on ADO and add the following variables:
#   - AZURE_APPSERVICE_RESOURCE_GROUP
#   - AZURE_OPENAI_API_KEY
#   - AZURE_OPENAI_CHATGPT_DEPLOYMENT
#   - AZURE_OPENAI_GPT_DEPLOYMENT
#   - AZURE_OPENAI_RESOURCE_GROUP
#   - AZURE_OPENAI_SERVICE
#   - AZURE_SEARCH_API_KEY
#   - AZURE_SEARCH_INDEX
#   - AZURE_SEARCH_SERVICE
#   - AZURE_STORAGE_ACCOUNT
#   - AZURE_STORAGE_CONNECTION_STRING
#   - AZURE_STORAGE_CONTAINER
#   - azureServiceConnectionId
#   - environmentName=<same as app service name>
#   - FLASK_APP=app.py
#   - FLASK_RUN_HOST=0.0.0.0
#   - pythonVersion=3.10
#   - vmImageName=ubuntu-latest
#   - webAppName=<same as app service name>

# The following pipeline -
# 1. Installs Node.js, builds and copies Node.js frontend, and installs Python requirements
# 2. Archives and uploads the package
# 3. Deploys the Azure Web App with specified settings and configurations.

trigger:
- poc

variables:
  - group: POC-1

  - name: projectRoot
    value: $(System.DefaultWorkingDirectory)

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: BuildJob
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '19.x'
      displayName: 'Install Node.js'

    - script: |
        cd app/frontend
        npm install
        npm run build
        cp -r ./node_modules ../backend/static/
      displayName: 'Build and copy Node.js frontend'

    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
      displayName: 'Use Python $(pythonVersion)'

    - script: |
        python -m venv antenv
        source antenv/bin/activate
        python -m pip install --upgrade pip
        pip install setup
        pip install -r requirements.txt
      workingDirectory: $(projectRoot)/app/backend
      displayName: "Install requirements"

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(projectRoot)/app/backend'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      displayName: 'Upload package'
      artifact: drop

- stage: Publish
  displayName: 'Publish build artefact for release'
  dependsOn: Build
  condition: succeeded()
  jobs:
    - job: BuildJob
      pool:
        vmImage: $(vmImageName)
      steps:
      - task: PublishPipelineArtifact@1
        displayName: 'Publish'
        inputs:
          targetPath: $(Build.ArtifactStagingDirectory)/**
          artifactType: 'pipeline'

- stage: Deploy
  displayName: 'Deploy Web App'
  dependsOn: Publish
  condition: succeeded()
  jobs:
  - deployment: DeploymentJob
    pool:
      vmImage: $(vmImageName)
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
            displayName: 'Use Python version'

          - task: AzureRmWebAppDeployment@4
            displayName: 'Deploy Azure Web App : $(webAppName)'
            inputs:
              azureSubscription: $(azureServiceConnectionId)
              appType: webAppLinux
              WebAppName: $(webAppName)
              packageForLinux: '$(Pipeline.Workspace)/drop/$(Build.BuildId).zip'
              RuntimeStack: 'PYTHON|$(pythonVersion)'
              StartupCommand: 'flask run -h 0.0.0.0 -p 8000'
              AppSettings: '-FLASK_APP "app.py" -FLASK_RUN_HOST "0.0.0.0" -AZURE_OPENAI_CHATGPT_DEPLOYMENT "$(AZURE_OPENAI_CHATGPT_DEPLOYMENT)" -AZURE_OPENAI_GPT_DEPLOYMENT "$(AZURE_OPENAI_GPT_DEPLOYMENT)" -AZURE_OPENAI_RESOURCE_GROUP "$(AZURE_OPENAI_RESOURCE_GROUP)" -AZURE_OPENAI_SERVICE "$(AZURE_OPENAI_SERVICE)" -AZURE_SEARCH_INDEX "$(AZURE_SEARCH_INDEX)" -AZURE_SEARCH_SERVICE "$(AZURE_SEARCH_SERVICE)" -AZURE_STORAGE_ACCOUNT "$(AZURE_STORAGE_ACCOUNT)" -AZURE_STORAGE_CONTAINER "content" -AZURE_STORAGE_CONNECTION_STRING "$(AZURE_STORAGE_CONNECTION_STRING)" -AZURE_OPENAI_API_KEY "$(AZURE_OPENAI_API_KEY)" -AZURE_SEARCH_API_KEY "$(AZURE_SEARCH_API_KEY)"'
              ConfigurationSettings: '-FLASK_APP "app.py" -FLASK_RUN_HOST "0.0.0.0" -AZURE_OPENAI_CHATGPT_DEPLOYMENT "$(AZURE_OPENAI_CHATGPT_DEPLOYMENT)" -AZURE_OPENAI_GPT_DEPLOYMENT "$(AZURE_OPENAI_GPT_DEPLOYMENT)" -AZURE_OPENAI_RESOURCE_GROUP "$(AZURE_OPENAI_RESOURCE_GROUP)" -AZURE_OPENAI_SERVICE "$(AZURE_OPENAI_SERVICE)" -AZURE_SEARCH_INDEX "$(AZURE_SEARCH_INDEX)" -AZURE_SEARCH_SERVICE "$(AZURE_SEARCH_SERVICE)" -AZURE_STORAGE_ACCOUNT "$(AZURE_STORAGE_ACCOUNT)" -AZURE_STORAGE_CONTAINER "content" -AZURE_STORAGE_CONNECTION_STRING "$(AZURE_STORAGE_CONNECTION_STRING)" -AZURE_OPENAI_API_KEY "$(AZURE_OPENAI_API_KEY)" -AZURE_SEARCH_API_KEY "$(AZURE_SEARCH_API_KEY)"'
              deploymentMethod: 'zipDeploy'
              SlotName: 'production'
              ResourceGroupName: $(AZURE_APPSERVICE_RESOURCE_GROUP)