trigger:
- poc

variables:
  - group: POC-1

  # Project root folder. Point to the folder containing manage.py file.
  - name: projectRoot
    value: $(System.DefaultWorkingDirectory)

  # Python version to use
  - name: pythonVersion
    value: '3.7'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: BuildJob
    pool:
      vmImage: $(POC-1.vmImageName)
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '14.x'
      displayName: 'Install Node.js'

    - script: |
        cd frontend
        npm install
        npm run build
        cp -r build/* ../backend/static/
      displayName: 'Build and copy Node.js frontend'

    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
      displayName: 'Use Python $(pythonVersion)'

    - script: |
        python -m venv antenv
        source antenv/bin/activate
        python -m pip install --upgrade pip
        pip install setup
        pip install -r requirements.txt
      workingDirectory: $(projectRoot)
      displayName: "Install requirements"

    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(projectRoot)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      displayName: 'Upload package'
      artifact: drop

- stage: Deploy
  displayName: 'Deploy Web App'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeploymentJob
    pool:
      vmImage: $(POC-1.vmImageName)
    environment: $(POC-1.environmentName)
    strategy:
      runOnce:
        deploy:
          steps:

          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
            displayName: 'Use Python version'

          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App : $(POC-1.webAppName)'
            inputs:
              appType: webAppLinux
              azureSubscription: $(POC-1.azureServiceConnectionId)
              appName: $(POC-1.webAppName)
              package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
              deployToSlotOrASE: true
              slotName: 'production'
              runtimeStack: 'PYTHON|3.8'
              startUpCommand: 'gunicorn app:app -b 0.0.0.0:5000'
              appSettings: |
                WEBSITES_PORT=5000
              resourceGroupName: $(POC-1.AZURE_OPENAI_RESOURCE_GROUP)
              configurationStrings: |
                AZURE_OPENAI_CHATGPT_DEPLOYMENT=$(POC-1.AZURE_OPENAI_CHATGPT_DEPLOYMENT)
                AZURE_OPENAI_GPT_DEPLOYMENT=$(POC-1.AZURE_OPENAI_GPT_DEPLOYMENT)
                AZURE_OPENAI_RESOURCE_GROUP=$(POC-1.AZURE_OPENAI_RESOURCE_GROUP)
                AZURE_OPENAI_SERVICE=$(POC-1.AZURE_OPENAI_SERVICE)
                AZURE_SEARCH_INDEX=$(POC-1.AZURE_SEARCH_INDEX)
                AZURE_SEARCH_SERVICE=$(POC-1.AZURE_SEARCH_SERVICE)
                AZURE_STORAGE_ACCOUNT=$(POC-1.AZURE_STORAGE_ACCOUNT)
                AZURE_STORAGE_CONTAINER='content',
                AZURE_STORAGE_CONNECTION_STRING=$(POC-1.AZURE_STORAGE_CONNECTION_STRING)
                AZURE_OPENAI_API_KEY=$(POC-1.AZURE_OPENAI_API_KEY)
                AZURE_SEARCH_API_KEY=$(POC-1.AZURE_SEARCH_API_KEY)
                FLASK_APP=app.py
                FLASK_RUN_HOST=0.0.0.0